import heapq

def heuristic(a, b): return abs(a[0]-b[0]) + abs(a[1]-b[1])

def astar(grid, start, goal):
    rows, cols = len(grid), len(grid[0])
    open_set = [(0 + heuristic(start, goal), 0, start)]
    came_from, g_score = {}, {start: 0}
    while open_set:
        _, cost, current = heapq.heappop(open_set)
        if current == goal:
            path = [current]
            while current in came_from:
                current = came_from[current]
                path.append(current)
            return path[::-1]
        for dx, dy in [(-1,0),(1,0),(0,-1),(0,1)]:
            nx, ny = current[0]+dx, current[1]+dy
            neighbor = (nx, ny)
            if 0<=nx<rows and 0<=ny<cols and not grid[nx][ny]:
                temp_g = g_score[current] + 1
                if neighbor not in g_score or temp_g < g_score[neighbor]:
                    g_score[neighbor] = temp_g
                    heapq.heappush(open_set, (temp_g + heuristic(neighbor, goal), temp_g, neighbor))
                    came_from[neighbor] = current
    return None

grid = [
    [0,1,0,0],
    [0,1,0,1],
    [0,0,0,0]
]

start, goal = (0,0), (2,3)
path = astar(grid, start, goal)
print("Path:", path if path else "No path found")

